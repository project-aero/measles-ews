#  rnaught_high: The upper range of mean basic reproductive ratio (scalar)
#  ntrials: The number of realizations (scalar)
#  nyears: The number of years to simulation (scalar)
#
# Returns:
#  A tibble with the size of susceptible and infected populations
#  through time, averaged over realizations. Note that "time" is specific to
#  the focal disease, e.g., 2 week intervals for measles. The tibble also
#  includes the time-specific value of R0.
outbreak <- {}  # empty object for storage
St <- rep(S0, ntrials)  # vector of starting values
It <- rep(I0, ntrials)  # vector of starting values
for(iyear in 1:nyears) {
timestep <- 0  # initilize timestep for tracking
S <- St  # copying for storage and binding
I <- It  # copying for storage and binding
rt <- runif(1, rnaught_low, rnaught_high)  # year-specific R0
while (sum(It) > 0 & timestep < (52/2)) {
p <- 1 - exp(-rt * (It/N))
It <- rbinom(ntrials, St, p)
St <- St - It
I <- rbind(I, It)
S <- rbind(S, St)
timestep <- timestep + 1
}  # end epidemic
Sout <- round(rowMeans(S))  # take the mean over realizations
Iout <- round(rowMeans(I))  # take the mean over realizations
outbreak_tmp <- tibble(
susceptible = Sout,
infected = Iout,
week = 0:timestep,
year = iyear
)
outbreak <- rbind(outbreak, outbreak_tmp)
}  # next year
return(outbreak)
}  # end Reed-Frost function
# Simulate the model ------------------------------------------------------
N <- 10000
S0 <- N - 1
I0 <- N - S0
rnaught_high <- 5
rnaught_low <- 1
ntrials <- 50
nyears <- 25
rf_data <- simulate_reed_frost(
N = N,
S0 = S0,
I0 = I0,
rnaught_high = rnaught_high,
rnaught_low = rnaught_low,
ntrials = ntrials,
nyears = nyears
)
plot(rf_data$infected, type = "l")
debugSource('~/Google_Drive/aero_measles/reed_frost_test.R')
rt <- runif(1, rnaught_low, rnaught_high)  #
S
I
St
It
while (sum(It) > 0 & timestep < (52/2)) {
p <- 1 - exp(-rt * (It/N))
It <- rbinom(ntrials, St, p)
St <- St - It
I <- rbind(I, It)
S <- rbind(S, St)
timestep <- timestep + 1
}  # end epidemic
St
S
I
p <- 1 - exp(-rt * (It/N))
It <- rbinom(ntrials, St, p)
St <- St - It
I <- rbind(I, It)
S <- rbind(S, St)
I
S
N <- 10000
S0 <- N - 1
I0 <- N - S0
rnaught_high <- 5
rnaught_low <- 1
ntrials <- 50
nyears <- 25
outbreak <- {}  # empty object for storage
St <- rep(S0, ntrials)  # vector of starting values
It <- rep(I0, ntrials)  # vector of starting values
for(iyear in 1:nyears) {
timestep <- 0  # initilize timestep for tracking
S <- St  # copying for storage and binding
I <- It  # copying for storage and binding
rt <- runif(1, rnaught_low, rnaught_high)  # year-specific R0
while (sum(It) > 0 & timestep < (52/2)) {
p <- 1 - exp(-rt * (It/N))
It <- rbinom(ntrials, St, p)
St <- St - It
I <- rbind(I, It)
S <- rbind(S, St)
timestep <- timestep + 1
}  # end epidemic
Sout <- round(rowMeans(S))  # take the mean over realizations
Iout <- round(rowMeans(I))  # take the mean over realizations
outbreak_tmp <- tibble(
susceptible = Sout,
infected = Iout,
week = 0:timestep,
year = iyear
)
outbreak <- rbind(outbreak, outbreak_tmp)
}  # next year
S
iyear
iyear =1
outbreak <- {}  # empty object for storage
St <- rep(S0, ntrials)  # vector of starting values
It <- rep(I0, ntrials)  # vector of starting values
timestep <- 0  # initilize timestep for tracking
S <- St  # copying for storage and binding
I <- It  # copying for storage and binding
rt <- runif(1, rnaught_low, rnaught_high)  # year-specific R0
S
I
while (sum(It) > 0 & timestep < (52/2)) {
p <- 1 - exp(-rt * (It/N))
It <- rbinom(ntrials, St, p)
St <- St - It
I <- rbind(I, It)
S <- rbind(S, St)
timestep <- timestep + 1
}  # end epidemic
S
I
Sout <- round(rowMeans(S))  # take the mean over realizations
Iout <- round(rowMeans(I))  # take the mean over realizations
outbreak_tmp <- tibble(
susceptible = Sout,
infected = Iout,
week = 0:timestep,
year = iyear
)
outbreak <- rbind(outbreak, outbreak_tmp)
iyear = 2
St
It
mean(It)
# reed_frost_test.R
#  Script to simulate SIR dynamics using the Reed-Frost chain binomial
#  stochastic model. Assume the disease is measles, occuring in 2-week
#  intervals. The simulator generates bi-weekly data, which I will try to model
#  using a state-space model based on monthly case "data" derived from the
#  the bi-weekly data.
#
# Author:
#  Andrew Tredennick
#  atredenn@gmail.com
rm(list = ls(all.names = TRUE))
# Load packages -----------------------------------------------------------
library(tidyverse)
# Define Reed-Frost model -------------------------------------------------
simulate_reed_frost <- function(N, S0, I0, rnaught_low, rnaught_high, ntrials, nyears) {
# Generates realizations for an epidemic following the Reed-Frost model.
#
# Args:
#  N: Total population size (scalar)
#  S0: Initial size of susceptible population (scalar)
#  I0: Initial size of infected population (scalar)
#  rnaught_low: The lower range of mean basic reproductive ratio (scalar)
#  rnaught_high: The upper range of mean basic reproductive ratio (scalar)
#  ntrials: The number of realizations (scalar)
#  nyears: The number of years to simulation (scalar)
#
# Returns:
#  A tibble with the size of susceptible and infected populations
#  through time, averaged over realizations. Note that "time" is specific to
#  the focal disease, e.g., 2 week intervals for measles. The tibble also
#  includes the time-specific value of R0.
outbreak <- {}  # empty object for storage
St <- rep(S0, ntrials)  # vector of starting values
It <- rep(I0, ntrials)  # vector of starting values
for(iyear in 1:nyears) {
timestep <- 0  # initilize timestep for tracking
if(iyear > 1) {
I0 <- max(1, mean(It))
S0 <- N - I0
St <- rep(S0, ntrials)  # vector of starting values
It <- rep(I0, ntrials)  # vector of starting values
}
S <- St  # copying for storage and binding
I <- It  # copying for storage and binding
rt <- runif(1, rnaught_low, rnaught_high)  # year-specific R0
while (sum(It) > 0 & timestep < (52/2)) {
p <- 1 - exp(-rt * (It/N))
It <- rbinom(ntrials, St, p)
St <- St - It
I <- rbind(I, It)
S <- rbind(S, St)
timestep <- timestep + 1
}  # end epidemic
Sout <- round(rowMeans(S))  # take the mean over realizations
Iout <- round(rowMeans(I))  # take the mean over realizations
outbreak_tmp <- tibble(
susceptible = Sout,
infected = Iout,
week = 0:timestep,
year = iyear
)
outbreak <- rbind(outbreak, outbreak_tmp)
}  # next year
return(outbreak)
}  # end Reed-Frost function
# Simulate the model ------------------------------------------------------
N <- 10000
S0 <- N - 1
I0 <- N - S0
rnaught_high <- 5
rnaught_low <- 1
ntrials <- 50
nyears <- 25
rf_data <- simulate_reed_frost(
N = N,
S0 = S0,
I0 = I0,
rnaught_high = rnaught_high,
rnaught_low = rnaught_low,
ntrials = ntrials,
nyears = nyears
)
plot(rf_data$infected, type = "l")
N <- 10000
S0 <- N - 1
I0 <- N - S0
rnaught_high <- 5
rnaught_low <- 1
ntrials <- 50
nyears <- 25
outbreak <- {}  # empty object for storage
St <- rep(S0, ntrials)  # vector of starting values
It <- rep(I0, ntrials)  # vector of starting values
source('~/Google_Drive/aero_measles/reed_frost_test.R')
setwd("~/Repos/measles-ews")
library(tidyverse)
library(lubridate)
file_name <- "../niger_measles/niger_regional_1995_2005.csv"
niger_measles <- read_csv(file_name)
niger_measles
niger_measles <- read_csv(file_name) %>%
gather(key = region, value = cases)
niger_measles
niger_measles <- read_csv(file_name) %>%
gather(key = region, value = cases, -X1)
niger_measles
niger_measles <- read_csv(file_name) %>%
gather(key = week, value = cases, -X1)
niger_measles
niger_measles <- read_csv(file_name) %>%
gather(key = week, value = cases, -X1) %>%
mutate(
week = as.numeric(week)
)
niger_measles
niger_measles <- read_csv(file_name) %>%
gather(key = week, value = cases, -X1) %>%
mutate(
week = as.numeric(as.factor(week))
)
niger_measles
file_name <- "../niger_measles/niger_regional_1995_2005.csv"
niger_measles <- read_csv(file_name)
num_regions <- nrow(niger_measles)
num_weeks <- ncol(niger_measles) - 1  # subtract 1 from ncol() because first column are regions
niger_measles <- niger_measles %>%
gather(key = week, value = cases, -X1)
niger_measles
file_name <- "../niger_measles/niger_regional_1995_2005.csv"
niger_measles_raw <- read_csv(file_name)
num_regions <- nrow(niger_measles_raw)
num_weeks <- ncol(niger_measles_raw) - 1  # subtract 1 from ncol() because first column are regions
niger_measles <- niger_measles_raw %>%
gather(key = week, value = cases, -X1) %>%
mutate(
week_num = rep(1:num_weeks, times = num_regions)
)
niger_measles
niger_measles <- niger_measles_raw %>%
gather(key = week, value = cases, -X1) %>%
mutate(
week_num = rep(1:num_weeks, each = num_regions)
)
niger_measles
# Create a vector of dates for each week over 11 years
start_date <- ymd("1995","01","01")
# Create a vector of dates for each week over 11 years
start_date <- ymd(c(1995,01,01))
ymd("19950101")
# Create a vector of dates for each week over 11 years
start_date <- ymd("19950101")
start_date + 11
start_date + 365*11
# Create a vector of dates for each week over 11 years
start_date <- ymd("19950101")
end_date <- start_date + (365*11)
all_dates <- seq(start_date, end_date, by = "week")
# Create a vector of dates for each week over 11 years
start_date <- ymd("19950101")
all_dates <- seq(start_date, by = "week", length.out = num_weeks)
file_name <- "../niger_measles/niger_regional_1995_2005.csv"
niger_measles_raw <- read_csv(file_name)
num_regions <- nrow(niger_measles_raw)
num_weeks <- ncol(niger_measles_raw) - 1  # subtract 1 from ncol() because first column are regions
# Create a vector of dates for each week over 11 years
start_date <- ymd("19950101")
all_dates <- seq(start_date, by = "week", length.out = num_weeks)
niger_measles <- niger_measles_raw %>%
gather(key = week, value = cases, -X1) %>%
mutate(
week_num = rep(1:num_weeks, each = num_regions),
date = all_dates
)
niger_measles <- niger_measles_raw %>%
gather(key = week, value = cases, -X1) %>%
mutate(
week_num = rep(1:num_weeks, each = num_regions),
date = rep(all_dates, each = num_regions)
)
niger_measles
library(ggthemes)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  # data wrangling
library(lubridate)  # time and date functions
library(ggthemes)   # pleasing ggplot2 themes
niger_measles <- niger_measles_raw %>%
gather(key = week, value = cases, -X1) %>%
mutate(
week_num = rep(1:num_weeks, each = num_regions),
date = rep(all_dates, each = num_regions)
) %>%
dplyr::rename(X1 = region)
niger_measles <- niger_measles_raw %>%
gather(key = week, value = cases, -X1) %>%
mutate(
week_num = rep(1:num_weeks, each = num_regions),
date = rep(all_dates, each = num_regions)
) %>%
dplyr::rename(region = X1)
file_name <- "../niger_measles/niger_regional_1995_2005.csv"
niger_measles_raw <- read_csv(file_name)
num_regions <- nrow(niger_measles_raw)
num_weeks <- ncol(niger_measles_raw) - 1  # subtract 1 from ncol() because first column are regions
# Create a vector of dates for each week over 11 years
start_date <- ymd("19950101")
all_dates <- seq(start_date, by = "week", length.out = num_weeks)
niger_measles <- niger_measles_raw %>%
gather(key = week, value = cases, -X1) %>%
mutate(
week_num = rep(1:num_weeks, each = num_regions),
date = rep(all_dates, each = num_regions)
) %>%
dplyr::rename(region = X1) %>%
dplyr::select(-week)
ggplot(data = niger_measles, aes(x = date, y = cases, color = region)) +
geom_line()
ggplot(data = niger_measles, aes(x = date, y = cases, color = region)) +
geom_line() +
guides(color = FALSE) +
theme_minimal()
ggplot(data = niger_measles, aes(x = date, y = cases)) +
geom_line() +
facet_wrap(~region) +
theme_minimal()
ggplot(data = niger_measles, aes(x = date, y = cases)) +
geom_line() +
facet_wrap(~region, scales = "free") +
theme_minimal() +
ggtitle("Measles cases in Niger", subtitle = "Weekly, by region")
ggplot(data = niger_measles, aes(x = date, y = cases)) +
geom_line() +
facet_wrap(~region, scales = "free_y") +
theme_minimal() +
ggtitle("Measles cases in Niger", subtitle = "Weekly, by region")
ggplot(data = niger_measles, aes(x = date, y = cases)) +
geom_line() +
facet_wrap(~region, scales = "free_y") +
theme_minimal(base_size = 10) +
ggtitle("Measles cases in Niger", subtitle = "Weekly, by region")
ggplot(data = filter(niger_measles, region == "Niamey (City)"), aes(x = date, y = cases)) +
geom_line() +
theme_minimal(base_size = 9) +
ggtitle("Measles cases in Niamey, Niger", subtitle = "Weekly")
ggplot(data = filter(niger_measles, region == "Niamey (City)"), aes(x = date, y = log(cases))) +
geom_line() +
theme_minimal(base_size = 9) +
ggtitle("Measles cases in Niamey, Niger", subtitle = "Weekly")
ggplot(data = filter(niger_measles, region == "Niamey (City)"), aes(x = date, y = cases)) +
geom_line() +
theme_minimal(base_size = 9) +
ggtitle("Measles cases in Niamey, Niger", subtitle = "Weekly")
ggplot(data = filter(niger_measles, region == "Niamey (City)"), aes(x = date, y = cases)) +
geom_line() +
theme_minimal(base_size = 20) +
ggtitle("Measles cases in Niamey, Niger", subtitle = "Weekly")
ggplot(data = filter(niger_measles, region == "Niamey (City)"), aes(x = date, y = cases)) +
geom_point() +
theme_minimal(base_size = 15) +
ggtitle("Measles cases in Niamey, Niger", subtitle = "Weekly")
Sys.time()
niger_measles_raw <- read_csv(file_name, col_types = cols())
niger_measles_raw <- read_csv(file_name, col_types = cols())
install.packages("codyn")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  # data wrangling
library(lubridate)  # time and date functions
library(ggthemes)   # pleasing ggplot2 themes
library(codyn)      # community dynamics metrics (e.g., synchrony)
library(GGally)
wide_niger <- niger_measles %>%
spread(week, region)
wide_niger <- niger_measles %>%
spread(week, cases)
wide_niger <- niger_measles %>%
dplyr::spread(week, cases)
wide_niger <- niger_measles %>%
spread(date, cases)
wide_niger
wide_niger <- niger_measles %>%
spread(region, cases)
wide_niger
wide_niger <- niger_measles %>%
spread(region, cases) %>%
dplyr::select(-week_num, -date)
wide_niger
ggpairs(wide_niger)
codyn::synchrony(df = niger_measles, time.var = date, species.var = region, abundance.var = cases)
niger_measles
codyn::synchrony(df = niger_measles, time.var = week_num, species.var = region, abundance.var = cases)
niger_measles
codyn::synchrony(df = niger_measles, time.var = "week_num", species.var = "region", abundance.var = "cases")
round(regional_synchrony, 2)
regional_synchrony <- codyn::synchrony(
df = niger_measles,
time.var = "week_num",
species.var = "region",
abundance.var = "cases"
)
round(regional_synchrony, 2)
regional_synchrony <- codyn::synchrony(
df = niger_measles,
time.var = "week_num",
species.var = "region",
abundance.var = "cases",
metric = "Loreau"
)
niger_measles
niger_matrix <- niger_measles %>%
spread(region, cases)
niger_matrix
niger_cor_matrix <- niger_measles %>%
spread(region, cases) %>%
dplyr::select(-week_num, -date) %>%
cor()
niger_cor_matrix
install.packages("corrplot")
corrplot::corrplot(niger_cor_matrix, type="lower")
max(niger_measles$date)
niger_measles
niger_monthly <- niger_measles %>%
mutate(
month = month(date)
)
niger_monthly
niger_monthly <- niger_measles %>%
mutate(
month = month(date)
) %>%
group_by(month) %>%
summarise(cases = sum(cases))
niger_monthly
niamey_monthly <- niger_measles %>%
filter(region = "Niamey (City") %>%
mutate(
month = month(date)
) %>%
group_by(month) %>%
summarise(cases = sum(cases))
niamey_monthly <- niger_measles %>%
filter(region == "Niamey (City") %>%
mutate(
month = month(date)
) %>%
group_by(month) %>%
summarise(cases = sum(cases))
niamey_monthly
niamey_monthly <- niger_measles %>%
filter(region == "Niamey (City)") %>%
mutate(
month = month(date)
) %>%
group_by(month) %>%
summarise(cases = sum(cases))
niamey_monthly <- niger_measles %>%
filter(region == "Niamey (City)") %>%
mutate(
month = month(date),
year = year(date)
) %>%
group_by(year, month) %>%
summarise(cases = sum(cases))
niamey_monthly
glimpse(niamey_monthly)
unique(week(niger_measles$date))
niger_measles$date
